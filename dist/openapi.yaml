---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: "https://dm-recipes.cs.bgu.ac.il"
  - url: https://virtserver.swaggerhub.com/bitondor/API/1.0.0
    description: SwaggerHub API Auto Mocking
# - url: https://virtserver.swaggerhub.com/MaorAndDana/API/1.0.0
#   description: SwaggerHub API Auto Mocking
tags:
  - name: User
    description: Someone who registered to the website
  - name: recipes
    description: Object that includes the fixed attributes - instructions, ingredients and more
  - name: Meal
    description: Object that contains atleast one recipe.
paths:
  /register:
    post:
      tags:
        - auth
      summary: Adds a new user to the system
      description: Adds a new user to the system
      requestBody:
        description: Registraion form filled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: User created
        "401":
          description: Username or Password incorrect
        "409":
          description: Username taken exists
  /login:
    post:
      tags:
        - auth
      summary: Check if user is registered to the system
      description: Check if user is registered to the system
      requestBody:
        description: Login form filled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: login succeeded
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Username or Password incorrect
  /recipes/search:
    post:
      tags:
        - recipes
      summary: Search for recipe from existing corpus of recipes
      description: Search for recipe from existing corpus of recipes and return the numOfResults recipe (as the user instructed)
      requestBody:
        description: Search parameters filled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Search"
      responses:
        "200":
          description: return search results
        "400":
          description: invalid input, object invalid
  /recipes/perviewDetails:
    post:
      tags:
        - recipes
      summary: Get the preview details of the recipe
      description: Return for a given recipe his preview details - id, picture, recipe name, preparation time, popularity, vegan/vegaterian, gluten free, if the user watched this recipe before and if he saved it as a favorite.
      requestBody:
        description: Search parameters filled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreviewDatails"
      responses:
        "200":
          description: All the recipes preview details were return successfully.
        "400":
          description: invalid input, object invalid
  /users/my:
    get:
      security:
        - cookieAuth: []
      tags:
        - User
      summary: Get all the recipes that the logged in user uploaded to the user's my recipes
      description: Return all the recipes that the logged in user uploaded to the user's my recipes
      responses:
        "200":
          description: All the logged in user recipes were return successfully.
        "400":
          description: invalid input, object invalid

    post:
      tags:
        - User
      summary: save user recipe that the logged in user uploaded.
      description: save user recipe that the logged in user uploaded.
      requestBody:
        description: Search parameters filled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveRecipe"
      responses:
        "201":
          description: recipe was save sucessfully
        "400":
          description: invalid input, object invalid
  /users/favorite:
    get:
      tags:
        - User
      summary: Get all the favorite recipes that the logged in user liked
      description: Return all the favorite recipes that the logged in user liked
      responses:
        "200":
          description: All the logged in user favorite recipes were return successfully.
        "400":
          description: invalid input, object invalid
    post:
      tags:
        - User
      summary: Add new favorite recipe to the logged in user
      description: Adding new favorite recipe to the system with insturction and details - picture, recipe name, preparation time, popularity, vegan/vegaterian, gluten free, if the user watched this recipe before and if he saved it as a favorite and the logged in username.
      requestBody:
        description: All the parameters to create new recipe
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveRecipe"
      responses:
        "201":
          description: Adding favorite recipe to the logged in user was successful
        "400":
          description: invalid input, object invalid
  /users/family:
    get:
      tags:
        - User
      summary: Get all the family recipes that the logged in user uploaded
      description: Return all the family recipes that the logged in user uploaded
      responses:
        "200":
          description: All the logged in user family recipes were return successfully.
        "400":
          description: invalid input, object invalid
    post:
      tags:
        - User
      summary: Add new family recipe to the system
      description: Adding new family recipe to the system with insturction and details - picture, recipe name, preparation time, popularity, vegan/vegaterian, gluten free, if the user watched this recipe before and if he saved it as a favorite and the logged in username.
      requestBody:
        description: All the parameters to create new recipe
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveRecipe"
      responses:
        "201":
          description: Adding family recipe to logged in user was successful
        "400":
          description: invalid input, object invalid
  /recipes/random:
    get:
      tags:
        - recipes
      summary: Get 3 random recipes from the recipes corpus
      description: return 3 random recipes from the recipes corpus
      responses:
        "200":
          description: 3 random recipes were returned successfully
        "400":
          description: invalid input, object invalid
  /users/watch:
    get:
      tags:
        - User
      summary: Get 3 last watched recipes by the logged in user from the recipes corpus
      description: return 3 last watched recipes by the logged in user from the recipes
      operationId: get3LastWatchedRecipes
      responses:
        "200":
          description: 3 last watched recipes by the logged in user were returned successfully
        "400":
          description: invalid input, object invalid
  /recipes/details:
    post:
      tags:
        - recipes
      summary: Get the all the details of the recipe
      description: Return for a given recipe all the details - preview details (id, picture, recipe name, preparation time, popularity, vegan/vegaterian, gluten free, if the user watched this recipe before and if he saved it as a favorite) instuctions, ingrediants and amount, number of units.
      requestBody:
        description: get the details of the recipe
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllDatails"
      responses:
        "200":
          description: All the recipes details were return successfully.
        "400":
          description: invalid input, object invalid
  /recipes/changeMealOrder:
    post:
      tags:
        - recipes
      summary: change the order of recipes meal
      description: change the order of recipes meal
      requestBody:
        description: change the recipe from the meal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeRecipe"
      responses:
        "200":
          description: The recipes order changed successfully.
        "400":
          description: invalid input, object invalid
  /recipes/addMeal:
    post:
      tags:
        - recipes
      summary: add recipe to a meal
      description: add recipe to a meal per userName
      requestBody:
        description: add the recipe to the meal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRecipeToMeal"
      responses:
        "200":
          description: The recipes added successfully.
        "400":
          description: invalid input, object invalid
  /recipes/deleteMeal:
    post:
      tags:
        - recipes
      summary: delete recipe from a meal
      description: delete recipe from a meal per userName
      requestBody:
        description: delete the recipe from the meal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeRecipe"
      responses:
        "200":
          description: The recipes deleted successfully.
        "400":
          description: invalid input, object invalid
  /recipes/analyzedInstructions:
    post:
      tags:
        - recipes
      summary: get the analyzed instruction from a recipe
      description: get the analyzed instruction from a recipe
      requestBody:
        description: get analyzed instruction from a recupe
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/analyzedInstructions"
      responses:
        "200":
          description: analyzed instruction return successfully.
        "400":
          description: invalid input, object invalid
  /users/allwatched:
    get:
      tags:
        - User
      summary: Get all last watched recipes by the logged in user from the recipes corpus
      description: return all last watched recipes by the logged in user from the recipes
      operationId: getAllLastWatchedRecipes
      responses:
        "200":
          description: all last watched recipes by the logged in user were returned successfully
        "400":
          description: invalid input, object invalid
components:
  schemas:
    Register:
      required:
        - country
        - email
        - firstName
        - lastName
        - password
        - passwordConfirmation
        - username
      type: object
      properties:
        username:
          type: string
          example: maordana
        firstName:
          type: string
          example: Maor
        lastName:
          type: string
          example: Dana
        country:
          type: string
          example: Israel
        password:
          type: string
          example: Aa123456
        passwordConfirmation:
          type: string
          example: Dana
        email:
          type: string
          format: email
          example: maordana@gmail.com
    Login:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          example: maordana
        password:
          type: string
          example: Aa123456
    Search:
      required:
        - numberSearch
        - querySearch
      type: object
      properties:
        numberSearch:
          type: integer
        querySearch:
          type: string
          example: chicken noodles
        cuisine:
          type: string
          example: italian
        diet:
          type: string
          example: vegan
        intolerance:
          type: string
          example: gluten
    SaveRecipe:
      required:
        - analyzedInstructions
        - glutenFree
        - ingredients
        - insturctions
        - picture
        - popularity
        - preparationTime
        - recipeName
        - servings
        - username
        - vegan
        - vegeterain
      type: object
      properties:
        analyzedInstructions:
          type: string
          descreption: "step-by-step instructions"
        insturctions:
          type: string
          example: See in this link https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions
        picture:
          type: string
          description: file path to the picture that will send to the server
          example: D:/Desktop/myImage.png
        recipeName:
          type: string
          example: Chocolate cake
        preparationTime:
          type: number
          example: 1.5
        popularity:
          type: integer
          format: int64
          example: 8
        vegan:
          type: boolean
          example: false
        vegeterain:
          type: boolean
          example: false
        glutenFree:
          type: boolean
          example: false
        username:
          type: string
          example: maordana
        servings:
          type: integer
          example: 5
        ingredients:
          type: array
          example: See in this link https://spoonacular.com/food-api/docs#Get-Ingredient-Information
          items:
            type: string
    PreviewDatails:
      required:
        - recipeIdList
      type: object
      properties:
        recipeIdList:
          type: array
          example:
            - "663559"
            - "642582"
            - "655705"
            - "652100"
          items:
            type: string
    AllDatails:
      required:
        - recipeId
        - userName
      type: object
      properties:
        recipeId:
          type: string
          example: "663559"
        userName:
          type: string
          example: "maordana"

    changeRecipe:
      required:
        - recipeAndOrderList
        - userName
      type: object
      properties:
        userName:
          type: string
        recipeAndOrderList:
          type: array
          example:
            - recipeId: "663559"
              orderRecipe: 0
            - recipeId: "642582"
              orderRecipe: 1
          items:
            type: string
    addRecipeToMeal:
      required:
        - recipeId
        - userName
      type: object
      properties:
        userName:
          type: string
        recipeId:
          type: string
    analyzedInstructions:
      required:
        - recipeId
      type: object
      properties:
        recipeId:
          type: string
    securitySchemes:
      cookieAuth: # arbitrary name for the security scheme; will be used in the "security" key later
        type: apiKey
        in: cookie
        name: JSESSIONID
